import com.android.build.gradle.AppPlugin
import com.android.build.gradle.LibraryPlugin

apply plugin: 'com.android.application'
apply plugin: com.lilong.gradle.Demo

android {
    compileSdkVersion 26
    buildToolsVersion "25.0.1"
    defaultConfig {
        applicationId "com.lilong.gradle"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dexOptions {
        additionalParameters '--minimal-main-dex'
    }
}

//demoExtension {
//    demoExtensionProperty "haha"
    // 无参数时方法调用的括号不能省略
//    demoExtensionMethod1()
//    demoExtensionMethod2 "hehe"
//}

// ---实现类似provided方式依赖远程module---
// 自定义一个configuration=providedExternalModule，以便在dependencies块中使用
// 其作用是：使用这个configuration添加依赖的module，都会用provided_project.gradle脚本提取其所依赖的所有aar包，进一步提取其中的jar包，最后都拷贝到supportLibJars目录下
// 而supportLibJars目录是以provided方式被添加到依赖里的，最终实现类似provided依赖的效果
configurations {
    providedExternalModule.setTransitive(true)
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support.constraint:constraint-layout:1.1.0'
    providedExternalModule "com.android.support:design:26.0.0"
    provided fileTree(dir: 'external-support-lib-jars')
}

// 可以根据当前脚本使用的插件来判断是主工程还是库工程
getPlugins().each {Plugin plugin ->
    if(plugin instanceof AppPlugin){
        println("app")
    }else if(plugin instanceof LibraryPlugin){
        println("library")
    }
}

apply from: "provided_project.gradle"
